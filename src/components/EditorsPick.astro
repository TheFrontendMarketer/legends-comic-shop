<section class="py-80 bg-gradient-to-b from-gray-900 to-black">
  <div class="site-container">
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-6xl font-bangers text-white mb-4">
        Editor's Picks of the Week
      </h2>
      <p class="text-xl text-gray-300 max-w-2xl mx-auto">
        Our team's handpicked selection of this week's must-read comics
      </p>
    </div>

    <!-- Comic Cards Container -->
    <div
      class="comics-grid grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-8"
    >
      <!-- Placeholder cards that will be populated by JavaScript -->
      <div class="comic-card opacity-0 transform translate-y-20">
        <div class="comic-card-inner relative group cursor-pointer">
          <div
            class="comic-cover relative overflow-hidden rounded-lg shadow-2xl transform transition-transform duration-300 group-hover:scale-105"
          >
            <img
              src=""
              alt="Loading comic..."
              class="w-full h-64 object-cover"
              loading="lazy"
            />
            <div class="absolute inset-0 border-4 border-black rounded-lg">
            </div>
          </div>
          <div class="comic-info mt-4 text-center">
            <h3 class="text-white font-bold text-lg mb-2">Loading...</h3>
            <p class="text-gray-400 text-sm">#</p>
            <p
              class="comic-description text-gray-300 text-xs mt-2 line-clamp-3"
            >
              Loading description...
            </p>
          </div>
        </div>
      </div>

      <!-- Repeat 4 more times for 5 total cards -->
      <div class="comic-card opacity-0 transform translate-y-20">
        <div class="comic-card-inner relative group cursor-pointer">
          <div
            class="comic-cover relative overflow-hidden rounded-lg shadow-2xl transform transition-transform duration-300 group-hover:scale-105"
          >
            <img
              src=""
              alt="Loading comic..."
              class="w-full h-64 object-cover"
              loading="lazy"
            />
            <div class="absolute inset-0 border-4 border-black rounded-lg">
            </div>
          </div>
          <div class="comic-info mt-4 text-center">
            <h3 class="text-white font-bold text-lg mb-2">Loading...</h3>
            <p class="text-gray-400 text-sm">#</p>
            <p
              class="comic-description text-gray-300 text-xs mt-2 line-clamp-3"
            >
              Loading description...
            </p>
          </div>
        </div>
      </div>

      <div class="comic-card opacity-0 transform translate-y-20">
        <div class="comic-card-inner relative group cursor-pointer">
          <div
            class="comic-cover relative overflow-hidden rounded-lg shadow-2xl transform transition-transform duration-300 group-hover:scale-105"
          >
            <img
              src=""
              alt="Loading comic..."
              class="w-full h-64 object-cover"
              loading="lazy"
            />
            <div class="absolute inset-0 border-4 border-black rounded-lg">
            </div>
          </div>
          <div class="comic-info mt-4 text-center">
            <h3 class="text-white font-bold text-lg mb-2">Loading...</h3>
            <p class="text-gray-400 text-sm">#</p>
            <p
              class="comic-description text-gray-300 text-xs mt-2 line-clamp-3"
            >
              Loading description...
            </p>
          </div>
        </div>
      </div>

      <!-- Comic Card 4 -->
      <div class="comic-card opacity-0 transform translate-y-20">
        <div class="comic-card-inner relative group cursor-pointer">
          <div
            class="comic-cover relative overflow-hidden rounded-lg shadow-2xl transform transition-transform duration-300 group-hover:scale-105"
          >
            <img
              src=""
              alt="Loading comic..."
              class="w-full h-64 object-cover"
              loading="lazy"
            />
            <div class="absolute inset-0 border-4 border-black rounded-lg">
            </div>
          </div>
          <div class="comic-info mt-4 text-center">
            <h3 class="text-white font-bold text-lg mb-2">Loading...</h3>
            <p class="text-gray-400 text-sm">#</p>
            <p
              class="comic-description text-gray-300 text-xs mt-2 line-clamp-3"
            >
              Loading description...
            </p>
          </div>
        </div>
      </div>

      <!-- Comic Card 5 -->
      <div class="comic-card opacity-0 transform translate-y-20">
        <div class="comic-card-inner relative group cursor-pointer">
          <div
            class="comic-cover relative overflow-hidden rounded-lg shadow-2xl transform transition-transform duration-300 group-hover:scale-105"
          >
            <img
              src=""
              alt="Loading comic..."
              class="w-full h-64 object-cover"
              loading="lazy"
            />
            <div class="absolute inset-0 border-4 border-black rounded-lg">
            </div>
          </div>
          <div class="comic-info mt-4 text-center">
            <h3 class="text-white font-bold text-lg mb-2">Loading...</h3>
            <p class="text-gray-400 text-sm">#</p>
            <p
              class="comic-description text-gray-300 text-xs mt-2 line-clamp-3"
            >
              Loading description...
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  // Fetch comics from Netlify function with fallback
  async function fetchComics() {
    try {
      console.log("Fetching from Netlify function...");
      const response = await fetch("/.netlify/functions/marvel");
      console.log("Response status:", response.status);
      console.log("Response ok:", response.ok);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log("Comics data received:", data);
      return data || [];
    } catch (error) {
      console.error("Netlify function failed, trying fallback:", error);

      // Fallback: Use client-side API call with public key only
      try {
        const MARVEL_PUBLIC_KEY = "c1c278bf26386ea3ed4ba42319211448";
        const url = `https://gateway.marvel.com/v1/public/comics?limit=50&orderBy=-onsaleDate&apikey=${MARVEL_PUBLIC_KEY}`;

        const response = await fetch(url);
        const data = await response.json();
        const allComics = data.data?.results || [];

        const targetSeries = [
          "Spider-Man",
          "X-Men",
          "Avengers",
          "X-Force",
          "Deadpool",
          "Wolverine",
          "Iron Man",
          "Captain America",
          "Thor",
          "Hulk",
        ];

        const validComics = allComics.filter((comic) => {
          if (
            !comic.thumbnail ||
            !comic.thumbnail.path ||
            comic.thumbnail.path.includes("image_not_available") ||
            !comic.title
          ) {
            return false;
          }

          const title = comic.title.toLowerCase();
          return targetSeries.some((series) =>
            title.includes(series.toLowerCase())
          );
        });

        const shuffled = validComics.sort(() => 0.5 - Math.random());
        return shuffled.slice(0, 5);
      } catch (fallbackError) {
        console.error("Fallback also failed:", fallbackError);
        return [];
      }
    }
  }

  // Populate comic cards with data
  function populateComicCards(comics) {
    const cards = document.querySelectorAll(".comic-card");

    cards.forEach((card, index) => {
      if (comics[index]) {
        const comic = comics[index];
        const img = card.querySelector("img");
        const title = card.querySelector("h3");
        const issue = card.querySelector("p");
        const description = card.querySelector(".comic-description");

        if (img) {
          // Fix the image URL - use HTTPS and proper sizing
          const imageUrl = `${comic.thumbnail.path.replace("http:", "https:")}/portrait_uncanny.${comic.thumbnail.extension}`;
          img.src = imageUrl;
          img.alt = comic.title;

          // Add error handling for failed image loads
          img.onerror = function () {
            // Fallback to a different size
            this.src = `${comic.thumbnail.path.replace("http:", "https:")}/standard_medium.${comic.thumbnail.extension}`;
          };
        }
        if (title) title.textContent = comic.title;
        if (issue) issue.textContent = `#${comic.issueNumber || "N/A"}`;
        if (description) {
          // Use textObjects for description, fallback to description field
          let descText = "";
          if (comic.textObjects && comic.textObjects.length > 0) {
            descText = comic.textObjects[0].text;
          } else if (comic.description && comic.description !== "#N/A") {
            descText = comic.description;
          } else {
            descText = "No description available";
          }

          // Clean up the description (remove HTML tags and limit length)
          const cleanDescription =
            descText
              .replace(/<[^>]*>/g, "") // Remove HTML tags
              .replace(/&[^;]+;/g, "") // Remove HTML entities
              .substring(0, 120) + "..."; // Limit to 120 characters
          description.textContent = cleanDescription;
        }
      }
    });
  }

  // Initialize everything
  async function init() {
    // Fetch comics data
    const comics = await fetchComics();
    populateComicCards(comics);

    // Scroll-triggered animation for comic cards
    gsap.utils.toArray(".comic-card").forEach((card, index) => {
      gsap.fromTo(
        card,
        {
          opacity: 0,
          y: 100,
          rotation: -10,
          scale: 0.8,
        },
        {
          opacity: 1,
          y: 0,
          rotation: 0,
          scale: 1,
          duration: 0.8,
          ease: "back.out(1.7)",
          scrollTrigger: {
            trigger: card,
            start: "top 80%",
            end: "bottom 20%",
            toggleActions: "play none none reverse",
          },
          delay: index * 0.2,
        }
      );
    });

    // Comic card hover animations
    document.querySelectorAll(".comic-card-inner").forEach((card) => {
      card.addEventListener("mouseenter", () => {
        gsap.to(card, {
          y: -10,
          duration: 0.3,
          ease: "power2.out",
        });
      });

      card.addEventListener("mouseleave", () => {
        gsap.to(card, {
          y: 0,
          duration: 0.3,
          ease: "power2.out",
        });
      });
    });
  }

  // Start when DOM is ready
  document.addEventListener("DOMContentLoaded", init);
</script>
